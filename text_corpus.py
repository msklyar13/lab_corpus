# -*- coding: utf-8 -*-
"""Text Corpus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12NGv5tqNIC9EysYm6Qey9q5of06n4Da6

**Підвантажуємо необхідні бібліотеки:**
"""

!pip install pymorphy3
!pip install pymorphy3_dicts_uk
!pip install tokenize_uk

import re
import pymorphy3

import pymorphy3_dicts_uk
morph = pymorphy3.MorphAnalyzer(lang='uk')

import tokenize_uk as tu
import sqlite3

"""**Задаємо функції, необхідні для повної обробки тексту:**"""

def textDetails(text):
  file_name = re.search(r'.+\.(.+)\.txt', text).group(1)
  file_type = re.search(r'(.+?)\..+', text).group(1)
  return file_name, file_type


def fileToText(file): 
  with open(file, 'r', encoding='utf-8') as f:
      return f.read()


def textToSent(text):
  text_by_parag = re.split('\n', text)
  text_by_sent = {}
  i=1

  for parag in text_by_parag:
    for sent in tu.tokenize_sents(parag):
      text_by_sent[i] = sent
      i+=1
  
  return text_by_sent


def textToWords(text):
  text_by_words = {}

  text = re.sub(r'[^\w]', ' ', text).lower().split() #return and check if deletign non alpha symbs makes sense

  for w in text:
      text_by_words[w] = (morph.parse(w)[0].normal_form, morph.parse(w)[0].tag.POS)

  return text_by_words

"""**Створюємо базу даних та таблиці в ній:**"""

conn = sqlite3.connect('corpus_db.db')
c = conn.cursor()

c.execute('''DROP TABLE IF EXISTS texts''')
c.execute('''DROP TABLE IF EXISTS sentences''')
c.execute('''DROP TABLE IF EXISTS words''')
c.execute('''DROP TABLE IF EXISTS lemmas''')

c.execute('''CREATE TABLE IF NOT EXISTS texts (
    text_id INTEGER PRIMARY KEY,
    text_name TEXT,
    text_type VARCHAR(20))
    ''')

c.execute('''CREATE TABLE IF NOT EXISTS sentences (
    sent_id INTEGER PRIMARY KEY,
    sent TEXT,
    sent_num INTEGER,
    text_id INTEGER,
    FOREIGN KEY (text_id) REFERENCES texts(text_id))
    ''')

c.execute('''CREATE TABLE IF NOT EXISTS words (
    word_id INTEGER PRIMARY KEY,
    word VARCHAR(50),
    sent_id INTEGER,
    text_id INTEGER,
    FOREIGN KEY (sent_id) REFERENCES sentences(sent_id),
    FOREIGN KEY (text_id) REFERENCES texts(text_id))
    ''')

c.execute('''CREATE TABLE IF NOT EXISTS lemmas (
    word_id INTEGER,
    word VARCHAR(50),
    lemma VARCHAR(50),
    pos VARCHAR(10),
    sent_id INTEGER,
    text_id INTEGER,
    FOREIGN KEY (word_id) REFERENCES words(word_id),
    FOREIGN KEY (sent_id) REFERENCES sentences(sent_id),
    FOREIGN KEY (text_id) REFERENCES texts(text_id))
    ''')

conn.commit()

"""**Обробляємо дані з текстів та заповнюємо базу даних:**"""

text_lib = ['non-fiction.pravyla_dorozhnioho_ruchu_2022.txt',
            'fiction.kotsiubynskyy-mykhaylo-mykhaylovych-tsvit-iabluni2548.txt',
            'fiction.kotsiubynskyy-mykhaylo-mykhaylovych-Persona-grata2563.txt',
            'fiction.kotsiubynskyy-mykhaylo-mykhaylovych-Intermezzo1065.txt',
            'fiction.kotsiubynskyy-mykhaylo-mykhaylovych-Fata-Morgana1066.txt',
            'fiction.khvylovyy-mykola-kit-u-chobotiakh664.txt',
            'fiction.khvylovyy-mykola-ia-(romantyka)660.txt']


text_id = 1
sent_id = 1
word_id = 1

for text in text_lib:
  text_name = textDetails(text)[0]
  text_type = textDetails(text)[1]
  c.execute('''INSERT INTO texts VALUES (?, ?, ?)''',
              (text_id, text_name, text_type))

  for sent_num, sent in textToSent(fileToText(text)).items():
    c.execute('''INSERT INTO sentences VALUES (?, ?, ?, ?)''',
              (sent_id, sent, sent_num, text_id))
  
    for word, pos_lemma in textToWords(sent).items():
      c.execute('''INSERT INTO words VALUES (?, ?, ?, ?)''',
                  (word_id, word, sent_id, text_id))
      c.execute('''INSERT INTO lemmas VALUES (?, ?, ?, ?, ?, ?)''',
                  (word_id, word, pos_lemma[0], pos_lemma[1], sent_id, text_id))
      word_id += 1
    
    sent_id += 1
  
  text_id += 1
  conn.commit()

  #conn.close()

"""**Виводимо дані з усіх таблиць:**

УВАГА: великий об'єм даних, запускати лише за необхідності.
"""

#conn = sqlite3.connect('corpus_db.db')
#c = conn.cursor()

print('\nTEXTS:')
c.execute("SELECT * FROM texts")
result = c.fetchall()

for row in result:
    print(row)

print('\nSENTENCES:')
c.execute("SELECT * FROM sentences")
result = c.fetchall()

for row in result:
    print(row)

print('\nWORDS:')
c.execute("SELECT * FROM words")
result = c.fetchall()

for row in result:
    print(row)

print('\nLEMMAS:')
c.execute("SELECT * FROM lemmas")
result = c.fetchall()

for row in result:
    print(row)

#conn.close()

"""**Додаємо інтеракцію з користувачем:**"""

conn = sqlite3.connect('corpus_db.db')
c = conn.cursor()

def textTypeReq():
  text_type = input('''Вітаємо. У нашому словнику представлені тексти у стилі fiction та non-fiction.
Який стиль вас цікавить? ''')
  while text_type != 'fiction' and text_type != 'non-fiction':
    text_type = input('''\nДоступні наразі стилі: fiction або non-fiction.
Спробуйте ще раз: ''')
  return text_type


def searchTypeReq():
  search_type = input('''\nЧудовий вибір.
Пошук можливий як за словоформами (word), так і за лемами (lemma).
За чим шукатимете? ''')
  while search_type != 'word' and search_type != 'lemma':
    search_type = input('''\nПошук можливий лише за словоформами (word) або лемами (lemma).
Спробуйте ще раз: ''')
  return search_type


def defReq():
  req = input('''\nДякую. Введіть слово для пошуку: ''')
  return req


def search_fict(t_type, req, w):
  print('Результати пошуку:')

  c.execute('''SELECT text_id FROM texts WHERE text_type = ?''', (t_type,))
  text_id_set = set(c.fetchall())

  if req == 'word':
    for text_id in text_id_set:
      c.execute('''SELECT sent_id FROM words WHERE text_id = ? AND word = ?''', (text_id[0], w,))
      sent_id_set = set(c.fetchall())
    
      for sent_id in sent_id_set:
        c.execute('''SELECT sent FROM sentences WHERE sent_id = ?''', (sent_id))
        print('> ' + c.fetchone()[0])


  elif req == 'lemma':
    for text_id in text_id_set:
      c.execute('''SELECT sent_id FROM lemmas WHERE text_id = ? AND lemma = ?''', (text_id[0], w,))
      sent_id_set = set(c.fetchall())
    
      for sent_id in sent_id_set:
        c.execute('''SELECT sent FROM sentences WHERE sent_id = ?''', (sent_id))
        print('> ' + c.fetchone()[0])

  return '\nПошукаємо ще одне слово? :)'


print(search_fict(textTypeReq(), searchTypeReq(), defReq()))

conn.close()